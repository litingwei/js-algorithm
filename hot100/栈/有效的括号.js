/**
 * 给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。

有效字符串需满足：

左括号必须用相同类型的右括号闭合。
左括号必须以正确的顺序闭合。
每个右括号都有一个对应的相同类型的左括号。
 */
/**
 * 
 * 解题思路
使用栈：
遇到左括号时，将其压入栈中。
遇到右括号时，检查栈顶是否有匹配的左括号。
如果有，弹出栈顶元素继续检查下一个字符。
如果没有，说明字符串无效，直接返回 false。
检查栈是否为空：
遍历结束后，如果栈为空，说明所有的括号都成功匹配，返回 true。
如果栈不为空，说明有未匹配的左括号，返回 false。
 */
var isValid = function (s) {
  const stack = []
  const mapping = {
    ')': '(',
    '}': '{',
    ']': '[',
  }

  for (let char of s) {
    if (char === '(' || char === '{' || char === '[') {
      // 如果是左括号，压入栈中
      stack.push(char)
    } else if (char === ')' || char === '}' || char === ']') {
      // 如果是右括号，检查栈顶是否匹配
      if (stack.length === 0 || stack.pop() !== mapping[char]) {
        return false
      }
    }
  }

  // 最后检查栈是否为空
  return stack.length === 0
}
/**
 * 代码解释
栈的使用：
stack 数组用来存放左括号。
mapping 对象用来存放右括号与左括号的对应关系。
遍历字符串：
如果当前字符是左括号，直接压入栈中。
如果是右括号，检查栈顶元素是否匹配。
如果匹配，弹出栈顶元素。
如果不匹配或者栈为空（没有多余的左括号），返回 false。
最终检查：
遍历完字符串后，栈应该为空。如果栈为空，返回 true，表示所有括号都匹配；否则返回 false。
 */
