/**
给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。

你必须在 原地 旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要 使用另一个矩阵来旋转图像。
 */
/**
要在原地将一个 n×n 的二维矩阵顺时针旋转 90 度，可以通过以下两个步骤实现：

转置矩阵：将矩阵的行变为列，列变为行。
翻转每一行：将每一行中的元素进行翻转。
这两个步骤可以实现顺时针旋转 90 度的效果。

解释
转置矩阵：

遍历矩阵的上三角部分（不包括对角线），将元素 
(𝑖,𝑗)
(i,j) 和 
(𝑗,𝑖)
(j,i) 进行交换。这样，行和列的位置就互换了。
例如，原矩阵：
复制代码
1 2 3
4 5 6
7 8 9
转置后：
复制代码
1 4 7
2 5 8
3 6 9
翻转每一行：

遍历每一行，将每一行的元素进行翻转。
例如，上面转置后的矩阵，翻转每一行后：
复制代码
7 4 1
8 5 2
9 6 3
这样，我们就实现了在原地顺时针旋转矩阵 90 度的效果。

时间复杂度和空间复杂度
时间复杂度：O(n^2)，其中 n 是矩阵的边长，因为我们需要遍历矩阵中的每一个元素进行转置和翻转。
空间复杂度：O(1)，因为我们在原地进行操作，没有使用额外的空间。
 */
function rotate(matrix) {
  const n = matrix.length

  // 1. 转置矩阵
  for (let i = 0; i < n; i++) {
    for (let j = i + 1; j < n; j++) {
      ;[matrix[i][j], matrix[j][i]] = [matrix[j][i], matrix[i][j]]
    }
  }

  // 2. 翻转每一行
  for (let i = 0; i < n; i++) {
    matrix[i].reverse()
  }
}

// 示例用法
let matrix = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9],
]
rotate(matrix)
console.log(matrix) // 输出: [[7, 4, 1], [8, 5, 2], [9, 6, 3]]
